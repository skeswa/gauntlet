package org.gauntlet.quizzes.generator.defaults.impl;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.gauntlet.core.api.ApplicationException;
import org.gauntlet.core.api.dao.NoSuchModelException;
import org.gauntlet.problems.api.dao.IProblemDAOService;
import org.gauntlet.problems.api.model.Problem;
import org.gauntlet.problems.api.model.ProblemCategory;
import org.gauntlet.problems.api.model.ProblemDifficulty;
import org.gauntlet.problems.api.model.ProblemSource;
import org.osgi.framework.BundleContext;
import org.osgi.service.log.LogService;
import org.quizzical.backend.security.authorization.api.model.user.User;
import org.quizzical.backend.testdesign.api.dao.ITestDesignTemplateContentTypeDAOService;
import org.quizzical.backend.testdesign.api.dao.ITestDesignTemplateDAOService;
import org.quizzical.backend.testdesign.api.model.TestDesignTemplate;
import org.quizzical.backend.testdesign.api.model.TestDesignTemplateContentSubType;
import org.quizzical.backend.testdesign.api.model.TestDesignTemplateSection;
import org.gauntlet.quizzes.api.dao.IQuizDAOService;
import org.gauntlet.quizzes.api.model.Constants;
import org.gauntlet.quizzes.api.model.Quiz;
import org.gauntlet.quizzes.api.model.QuizProblem;
import org.gauntlet.quizzes.api.model.QuizType;
import org.gauntlet.quizzes.generator.api.IQuizGeneratorService;
import org.gauntlet.quizzes.generator.api.model.QuizGenerationParameters;

public class ByProblemSourceGeneratorImpl implements IQuizGeneratorService { 
	private static final DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
	private static final DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");

	private volatile LogService logger;
	
	private volatile BundleContext ctx;

	private volatile IQuizDAOService quizDAOService;
	
	private volatile IProblemDAOService problemDAOService;
	
	
	@Override
	public Quiz generate(User user, QuizGenerationParameters params) throws ApplicationException {
		ProblemSource source;
		try {
			source = problemDAOService.getProblemSourceByPrimary(
					params.getProblemSourceId());
		} catch (NoSuchModelException e) {
			throw new ApplicationException(String.format(
					"No source with id '%d' could be found: %s.",
					params.getProblemCategoryId(),
					e.getMessage()));
		}
		
		if (source == null) {
			throw new ApplicationException(String.format(
					"No source with id '%d' could be found.",
					params.getProblemCategoryId()));
		}
		
		final QuizType quizType = quizDAOService.provideQuizType(new QuizType(
				Constants.QUIZ_TYPE_GENERATED_NAME,
				Constants.QUIZ_TYPE_GENERATED_CODE));
		final String quizCode = String.format(
				"generated-%s-%d-%d",
				params.getGeneratorType(),
				params.getQuizSize(),
				System.currentTimeMillis());
		final Date quizDateTime = Calendar.getInstance().getTime();
		final String quizName = String.format(
				"Generated by Source \"%s\" at %s on %s",
				source.getName(),
				timeFormat.format(quizDateTime),
				dateFormat.format(quizDateTime));
		
		Map<Long,Problem> includedProblemIds = new HashMap<>();
		
		final List<Problem> problems = problemDAOService.findAllBySource(source.getId());
		final List<QuizProblem> unorderedQuizProblems = problems
				.stream()
				.map(problem -> {
					includedProblemIds.put(problem.getId(), problem);
					return new QuizProblem(
							quizCode,
							problem.getSourceIndexWithinPage(),
							problem.getSourceIndexWithinPage(),
							problem.getSourceIndexWithinPage(),
							problem.getId(),
							problem);
					
				})
				.collect(Collectors.toList());
			
		final Quiz quiz = new Quiz();
		quiz.setUserId(user.getId());
		quiz.setCode(quizCode);
		quiz.setName(quizName);
		quiz.setQuizType(quizType);
		quiz.setQuestions(unorderedQuizProblems);
		
		if (params.getQuizType() != null) {
			QuizType qt = quizDAOService.getQuizTypeByCode(params.getQuizType());
			quiz.setQuizType(qt);
		}
		
		final Quiz persistedQuiz = quizDAOService.provide(user, quiz);
		persistedQuiz.getQuestions()
			.stream()
			.forEach(question -> {
				question.setProblem(includedProblemIds.get(question.getProblemId()));
				question.setQuiz(quiz);
			});
		
		Collections.sort(persistedQuiz.getQuestions(), new Comparator<QuizProblem>() {
			@Override
			public int compare(QuizProblem o1, QuizProblem o2) {
				if  (o1.getOrdinal() < o2.getOrdinal())
					return -1;
				else if (o1.getOrdinal() > o2.getOrdinal())
					return  1;
				else 
					return 0;//they must be the same
			}
		});
		
		return persistedQuiz;
	}
}