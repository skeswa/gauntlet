// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: question.go
// DO NOT EDIT!

package dto

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"time"
)

func (mj *Question) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Question) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if mj.ID != nil {
		if true {
			buf.WriteString(`"id":`)
			fflib.FormatBits2(buf, uint64(*mj.ID), 10, *mj.ID < 0)
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"answer":`)
	fflib.WriteJsonString(buf, string(mj.Answer))
	buf.WriteString(`,"picture":`)
	fflib.WriteJsonString(buf, string(mj.Picture))
	buf.WriteByte(',')
	if mj.Category != nil {
		if true {
			buf.WriteString(`"category":`)

			{

				err = mj.Category.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.CategoryID != nil {
		if true {
			buf.WriteString(`"categoryId":`)
			fflib.FormatBits2(buf, uint64(*mj.CategoryID), 10, *mj.CategoryID < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Difficulty != nil {
		if true {
			buf.WriteString(`"difficulty":`)

			{

				err = mj.Difficulty.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.DateCreated != nil {
		if true {
			buf.WriteString(`"dateCreated":`)

			{

				obj, err = mj.DateCreated.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	if mj.DifficultyID != nil {
		if true {
			buf.WriteString(`"difficultyId":`)
			fflib.FormatBits2(buf, uint64(*mj.DifficultyID), 10, *mj.DifficultyID < 0)
			buf.WriteByte(',')
		}
	}
	if mj.MultipleChoice {
		buf.WriteString(`"multipleChoice":true`)
	} else {
		buf.WriteString(`"multipleChoice":false`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Questionbase = iota
	ffj_t_Questionno_such_key

	ffj_t_Question_ID

	ffj_t_Question_Answer

	ffj_t_Question_Picture

	ffj_t_Question_Category

	ffj_t_Question_CategoryID

	ffj_t_Question_Difficulty

	ffj_t_Question_DateCreated

	ffj_t_Question_DifficultyID

	ffj_t_Question_MultipleChoice
)

var ffj_key_Question_ID = []byte("id")

var ffj_key_Question_Answer = []byte("answer")

var ffj_key_Question_Picture = []byte("picture")

var ffj_key_Question_Category = []byte("category")

var ffj_key_Question_CategoryID = []byte("categoryId")

var ffj_key_Question_Difficulty = []byte("difficulty")

var ffj_key_Question_DateCreated = []byte("dateCreated")

var ffj_key_Question_DifficultyID = []byte("difficultyId")

var ffj_key_Question_MultipleChoice = []byte("multipleChoice")

func (uj *Question) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Question) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Questionbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Questionno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_Question_Answer, kn) {
						currentKey = ffj_t_Question_Answer
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_Question_Category, kn) {
						currentKey = ffj_t_Question_Category
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Question_CategoryID, kn) {
						currentKey = ffj_t_Question_CategoryID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_Question_Difficulty, kn) {
						currentKey = ffj_t_Question_Difficulty
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Question_DateCreated, kn) {
						currentKey = ffj_t_Question_DateCreated
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Question_DifficultyID, kn) {
						currentKey = ffj_t_Question_DifficultyID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Question_ID, kn) {
						currentKey = ffj_t_Question_ID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_Question_MultipleChoice, kn) {
						currentKey = ffj_t_Question_MultipleChoice
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Question_Picture, kn) {
						currentKey = ffj_t_Question_Picture
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Question_MultipleChoice, kn) {
					currentKey = ffj_t_Question_MultipleChoice
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Question_DifficultyID, kn) {
					currentKey = ffj_t_Question_DifficultyID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Question_DateCreated, kn) {
					currentKey = ffj_t_Question_DateCreated
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Question_Difficulty, kn) {
					currentKey = ffj_t_Question_Difficulty
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Question_CategoryID, kn) {
					currentKey = ffj_t_Question_CategoryID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Question_Category, kn) {
					currentKey = ffj_t_Question_Category
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Question_Picture, kn) {
					currentKey = ffj_t_Question_Picture
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Question_Answer, kn) {
					currentKey = ffj_t_Question_Answer
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Question_ID, kn) {
					currentKey = ffj_t_Question_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Questionno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Question_ID:
					goto handle_ID

				case ffj_t_Question_Answer:
					goto handle_Answer

				case ffj_t_Question_Picture:
					goto handle_Picture

				case ffj_t_Question_Category:
					goto handle_Category

				case ffj_t_Question_CategoryID:
					goto handle_CategoryID

				case ffj_t_Question_Difficulty:
					goto handle_Difficulty

				case ffj_t_Question_DateCreated:
					goto handle_DateCreated

				case ffj_t_Question_DifficultyID:
					goto handle_DifficultyID

				case ffj_t_Question_MultipleChoice:
					goto handle_MultipleChoice

				case ffj_t_Questionno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: uj.ID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.ID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.ID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Answer:

	/* handler: uj.Answer type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Answer = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Picture:

	/* handler: uj.Picture type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Picture = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Category:

	/* handler: uj.Category type=dto.Category kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Category = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Category == nil {
			uj.Category = new(Category)
		}

		err = uj.Category.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CategoryID:

	/* handler: uj.CategoryID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.CategoryID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.CategoryID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Difficulty:

	/* handler: uj.Difficulty type=dto.Difficulty kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Difficulty = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Difficulty == nil {
			uj.Difficulty = new(Difficulty)
		}

		err = uj.Difficulty.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DateCreated:

	/* handler: uj.DateCreated type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.DateCreated = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		if uj.DateCreated == nil {
			uj.DateCreated = new(time.Time)
		}

		err = uj.DateCreated.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DifficultyID:

	/* handler: uj.DifficultyID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.DifficultyID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.DifficultyID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MultipleChoice:

	/* handler: uj.MultipleChoice type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.MultipleChoice = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.MultipleChoice = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
