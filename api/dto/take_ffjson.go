// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: take.go
// DO NOT EDIT!

package dto

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"time"
)

func (mj *Take) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Take) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.ID != nil {
		if true {
			buf.WriteString(`"id":`)
			fflib.FormatBits2(buf, uint64(*mj.ID), 10, *mj.ID < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Quiz != nil {
		if true {
			buf.WriteString(`"quiz":`)

			{

				err = mj.Quiz.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.QuizID != nil {
		if true {
			buf.WriteString(`"quizId":`)
			fflib.FormatBits2(buf, uint64(*mj.QuizID), 10, *mj.QuizID < 0)
			buf.WriteByte(',')
		}
	}
	if len(mj.Answers) != 0 {
		buf.WriteString(`"answers":`)
		if mj.Answers != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Answers {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					err = v.MarshalJSONBuf(buf)
					if err != nil {
						return err
					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.DateTaken != nil {
		if true {
			buf.WriteString(`"dateTaken":`)

			{

				obj, err = mj.DateTaken.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Takebase = iota
	ffj_t_Takeno_such_key

	ffj_t_Take_ID

	ffj_t_Take_Quiz

	ffj_t_Take_QuizID

	ffj_t_Take_Answers

	ffj_t_Take_DateTaken
)

var ffj_key_Take_ID = []byte("id")

var ffj_key_Take_Quiz = []byte("quiz")

var ffj_key_Take_QuizID = []byte("quizId")

var ffj_key_Take_Answers = []byte("answers")

var ffj_key_Take_DateTaken = []byte("dateTaken")

func (uj *Take) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Take) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Takebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Takeno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_Take_Answers, kn) {
						currentKey = ffj_t_Take_Answers
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_Take_DateTaken, kn) {
						currentKey = ffj_t_Take_DateTaken
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Take_ID, kn) {
						currentKey = ffj_t_Take_ID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'q':

					if bytes.Equal(ffj_key_Take_Quiz, kn) {
						currentKey = ffj_t_Take_Quiz
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Take_QuizID, kn) {
						currentKey = ffj_t_Take_QuizID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_Take_DateTaken, kn) {
					currentKey = ffj_t_Take_DateTaken
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Take_Answers, kn) {
					currentKey = ffj_t_Take_Answers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Take_QuizID, kn) {
					currentKey = ffj_t_Take_QuizID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Take_Quiz, kn) {
					currentKey = ffj_t_Take_Quiz
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Take_ID, kn) {
					currentKey = ffj_t_Take_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Takeno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Take_ID:
					goto handle_ID

				case ffj_t_Take_Quiz:
					goto handle_Quiz

				case ffj_t_Take_QuizID:
					goto handle_QuizID

				case ffj_t_Take_Answers:
					goto handle_Answers

				case ffj_t_Take_DateTaken:
					goto handle_DateTaken

				case ffj_t_Takeno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: uj.ID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.ID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.ID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Quiz:

	/* handler: uj.Quiz type=dto.Quiz kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Quiz = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Quiz == nil {
			uj.Quiz = new(Quiz)
		}

		err = uj.Quiz.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_QuizID:

	/* handler: uj.QuizID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.QuizID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.QuizID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Answers:

	/* handler: uj.Answers type=[]dto.TakeAnswer kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Answers = nil
		} else {

			uj.Answers = []TakeAnswer{}

			wantVal := true

			for {

				var tmp_uj__Answers TakeAnswer

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Answers type=dto.TakeAnswer kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

						state = fflib.FFParse_after_value
						goto mainparse
					}

					err = tmp_uj__Answers.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
					if err != nil {
						return err
					}
					state = fflib.FFParse_after_value
				}

				uj.Answers = append(uj.Answers, tmp_uj__Answers)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DateTaken:

	/* handler: uj.DateTaken type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.DateTaken = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		if uj.DateTaken == nil {
			uj.DateTaken = new(time.Time)
		}

		err = uj.DateTaken.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *TakeAnswer) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *TakeAnswer) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if mj.ID != nil {
		if true {
			buf.WriteString(`"id":`)
			fflib.FormatBits2(buf, uint64(*mj.ID), 10, *mj.ID < 0)
			buf.WriteByte(',')
		}
	}
	if mj.TakeID != nil {
		if true {
			buf.WriteString(`"takeId":`)
			fflib.FormatBits2(buf, uint64(*mj.TakeID), 10, *mj.TakeID < 0)
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"answer":`)
	fflib.WriteJsonString(buf, string(mj.Answer))
	if mj.Correct {
		buf.WriteString(`,"correct":true`)
	} else {
		buf.WriteString(`,"correct":false`)
	}
	buf.WriteByte(',')
	if mj.Question != nil {
		if true {
			buf.WriteString(`"question":`)

			{

				err = mj.Question.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.QuestionID != nil {
		if true {
			buf.WriteString(`"questionId":`)
			fflib.FormatBits2(buf, uint64(*mj.QuestionID), 10, *mj.QuestionID < 0)
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"timesSkipped":`)
	fflib.FormatBits2(buf, uint64(mj.TimesSkipped), 10, mj.TimesSkipped < 0)
	buf.WriteString(`,"secondsElapsed":`)
	fflib.FormatBits2(buf, uint64(mj.SecondsElapsed), 10, mj.SecondsElapsed < 0)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_TakeAnswerbase = iota
	ffj_t_TakeAnswerno_such_key

	ffj_t_TakeAnswer_ID

	ffj_t_TakeAnswer_TakeID

	ffj_t_TakeAnswer_Answer

	ffj_t_TakeAnswer_Correct

	ffj_t_TakeAnswer_Question

	ffj_t_TakeAnswer_QuestionID

	ffj_t_TakeAnswer_TimesSkipped

	ffj_t_TakeAnswer_SecondsElapsed
)

var ffj_key_TakeAnswer_ID = []byte("id")

var ffj_key_TakeAnswer_TakeID = []byte("takeId")

var ffj_key_TakeAnswer_Answer = []byte("answer")

var ffj_key_TakeAnswer_Correct = []byte("correct")

var ffj_key_TakeAnswer_Question = []byte("question")

var ffj_key_TakeAnswer_QuestionID = []byte("questionId")

var ffj_key_TakeAnswer_TimesSkipped = []byte("timesSkipped")

var ffj_key_TakeAnswer_SecondsElapsed = []byte("secondsElapsed")

func (uj *TakeAnswer) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *TakeAnswer) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_TakeAnswerbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_TakeAnswerno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_TakeAnswer_Answer, kn) {
						currentKey = ffj_t_TakeAnswer_Answer
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_TakeAnswer_Correct, kn) {
						currentKey = ffj_t_TakeAnswer_Correct
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_TakeAnswer_ID, kn) {
						currentKey = ffj_t_TakeAnswer_ID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'q':

					if bytes.Equal(ffj_key_TakeAnswer_Question, kn) {
						currentKey = ffj_t_TakeAnswer_Question
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_TakeAnswer_QuestionID, kn) {
						currentKey = ffj_t_TakeAnswer_QuestionID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_TakeAnswer_SecondsElapsed, kn) {
						currentKey = ffj_t_TakeAnswer_SecondsElapsed
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_TakeAnswer_TakeID, kn) {
						currentKey = ffj_t_TakeAnswer_TakeID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_TakeAnswer_TimesSkipped, kn) {
						currentKey = ffj_t_TakeAnswer_TimesSkipped
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_TakeAnswer_SecondsElapsed, kn) {
					currentKey = ffj_t_TakeAnswer_SecondsElapsed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_TakeAnswer_TimesSkipped, kn) {
					currentKey = ffj_t_TakeAnswer_TimesSkipped
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_TakeAnswer_QuestionID, kn) {
					currentKey = ffj_t_TakeAnswer_QuestionID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_TakeAnswer_Question, kn) {
					currentKey = ffj_t_TakeAnswer_Question
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_TakeAnswer_Correct, kn) {
					currentKey = ffj_t_TakeAnswer_Correct
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_TakeAnswer_Answer, kn) {
					currentKey = ffj_t_TakeAnswer_Answer
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_TakeAnswer_TakeID, kn) {
					currentKey = ffj_t_TakeAnswer_TakeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_TakeAnswer_ID, kn) {
					currentKey = ffj_t_TakeAnswer_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_TakeAnswerno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_TakeAnswer_ID:
					goto handle_ID

				case ffj_t_TakeAnswer_TakeID:
					goto handle_TakeID

				case ffj_t_TakeAnswer_Answer:
					goto handle_Answer

				case ffj_t_TakeAnswer_Correct:
					goto handle_Correct

				case ffj_t_TakeAnswer_Question:
					goto handle_Question

				case ffj_t_TakeAnswer_QuestionID:
					goto handle_QuestionID

				case ffj_t_TakeAnswer_TimesSkipped:
					goto handle_TimesSkipped

				case ffj_t_TakeAnswer_SecondsElapsed:
					goto handle_SecondsElapsed

				case ffj_t_TakeAnswerno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: uj.ID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.ID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.ID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TakeID:

	/* handler: uj.TakeID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.TakeID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.TakeID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Answer:

	/* handler: uj.Answer type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Answer = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Correct:

	/* handler: uj.Correct type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Correct = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Correct = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Question:

	/* handler: uj.Question type=dto.Question kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Question = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Question == nil {
			uj.Question = new(Question)
		}

		err = uj.Question.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_QuestionID:

	/* handler: uj.QuestionID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.QuestionID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.QuestionID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TimesSkipped:

	/* handler: uj.TimesSkipped type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.TimesSkipped = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SecondsElapsed:

	/* handler: uj.SecondsElapsed type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.SecondsElapsed = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
