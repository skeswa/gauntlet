package org.gauntlet.quizzes.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import org.amdatu.jta.Transactional;
import org.gauntlet.core.api.ApplicationException;
import org.gauntlet.core.api.dao.NoSuchModelException;
import org.gauntlet.core.commons.util.Validator;
import org.gauntlet.core.commons.util.jpa.JPAEntityUtil;
import org.gauntlet.core.model.JPABaseEntity;
import org.gauntlet.core.service.impl.BaseServiceImpl;
import org.osgi.service.log.LogService;
import org.gauntlet.quizzes.api.dao.IQuizDAOService;
import org.gauntlet.quizzes.api.dao.IQuizProblemResponseDAOService;
import org.gauntlet.quizzes.api.model.QuizProblemResponse;


@SuppressWarnings("restriction")
@Transactional
public class QuizProblemResponseDAOImpl extends BaseServiceImpl implements IQuizProblemResponseDAOService {
	private volatile LogService logger;
	
	private volatile EntityManager em;
	
	@Override
	public LogService getLogger() {
		return logger;
	}

	public void setLogger(LogService logger) {
		this.logger = logger;
	}

	@Override
	public EntityManager getEm() {
		return em;
	}	

	@Override
	public QuizProblemResponse provide(QuizProblemResponse record)
			  throws ApplicationException {
		QuizProblemResponse existingCountry = getByCode(record.getCode());
		if (Validator.isNull(existingCountry))
		{
			JPABaseEntity res = super.add(JPAEntityUtil.copy(record, JPAQuizProblemResponse.class));
			existingCountry = JPAEntityUtil.copy(res, QuizProblemResponse.class);
		}

		return existingCountry;
	}
	
	@Override
	public QuizProblemResponse update(QuizProblemResponse record) throws ApplicationException {
		JPABaseEntity res = super.update(JPAEntityUtil.copy(record, JPAQuizProblemResponse.class));
		QuizProblemResponse dto = JPAEntityUtil.copy(res, QuizProblemResponse.class);
		return dto;	
	}	
	
	@Override
	public QuizProblemResponse delete(Long id) throws ApplicationException, NoSuchModelException {
		JPAQuizProblemResponse jpaEntity = (JPAQuizProblemResponse) super.findByPrimaryKey(JPAQuizProblemResponse.class, id);
		super.remove(jpaEntity);
		return JPAEntityUtil.copy(jpaEntity, QuizProblemResponse.class);
	}
	
	@Override
	public void createDefaults() throws ApplicationException {
	}	
}